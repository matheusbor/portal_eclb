// Mocks generated by Mockito 5.4.4 from annotations
// in portal_eclb/test/mocks/portal_eclb_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;
import 'package:portal_eclb/model/patrimony/composite/visitation_stage.dart'
    as _i23;
import 'package:portal_eclb/model/patrimony/news/patrimony_news_media.dart'
    as _i17;
import 'package:portal_eclb/model/patrimony/person/notable_person.dart' as _i22;
import 'package:portal_eclb/model/person/visitor/visitor.dart' as _i21;
import 'package:portal_eclb/resource/dao/dao_factory.dart' as _i20;
import 'package:portal_eclb/resource/dao/patrimony/composite/visitation_element_dao.dart'
    as _i15;
import 'package:portal_eclb/resource/dao/patrimony/composite/visitation_stage_dao.dart'
    as _i12;
import 'package:portal_eclb/resource/dao/patrimony/event/type_of_event_dao.dart'
    as _i7;
import 'package:portal_eclb/resource/dao/patrimony/historic/type_of_patrimony_historic_dao.dart'
    as _i9;
import 'package:portal_eclb/resource/dao/patrimony/media/type_of_media_dao.dart'
    as _i6;
import 'package:portal_eclb/resource/dao/patrimony/news/patrimony_news_media_dao.dart'
    as _i8;
import 'package:portal_eclb/resource/dao/patrimony/patrimony_dao.dart' as _i4;
import 'package:portal_eclb/resource/dao/patrimony/person/acting_dao.dart'
    as _i14;
import 'package:portal_eclb/resource/dao/patrimony/person/notable_person_dao.dart'
    as _i13;
import 'package:portal_eclb/resource/dao/patrimony/person/type_of_acting_dao.dart'
    as _i5;
import 'package:portal_eclb/resource/dao/patrimony/quiz/quiz_dao.dart' as _i10;
import 'package:portal_eclb/resource/dao/patrimony/simple/type_of_simple_patrimony_dao.dart'
    as _i16;
import 'package:portal_eclb/resource/dao/patrimony/type_of_patrimony_dao.dart'
    as _i3;
import 'package:portal_eclb/resource/dao/person/visitor/visitor_dao.dart'
    as _i11;
import 'package:portal_eclb/resource/session/database_session_manager.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObject_0 extends _i1.SmartFake implements Object {
  _FakeObject_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseSessionManager_1 extends _i1.SmartFake
    implements _i2.DatabaseSessionManager {
  _FakeDatabaseSessionManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTypeOfPatrimonyDAO_2 extends _i1.SmartFake
    implements _i3.TypeOfPatrimonyDAO {
  _FakeTypeOfPatrimonyDAO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatrimonyDAO_3 extends _i1.SmartFake implements _i4.PatrimonyDAO {
  _FakePatrimonyDAO_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTypeOfActingDAO_4 extends _i1.SmartFake
    implements _i5.TypeOfActingDAO {
  _FakeTypeOfActingDAO_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTypeOfMediaDAO_5 extends _i1.SmartFake
    implements _i6.TypeOfMediaDAO {
  _FakeTypeOfMediaDAO_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTypeOfEventDAO_6 extends _i1.SmartFake
    implements _i7.TypeOfEventDAO {
  _FakeTypeOfEventDAO_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatrimonyNewsMediaDAO_7 extends _i1.SmartFake
    implements _i8.PatrimonyNewsMediaDAO {
  _FakePatrimonyNewsMediaDAO_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTypeOfPatrimonyHistoricDAO_8 extends _i1.SmartFake
    implements _i9.TypeOfPatrimonyHistoricDAO {
  _FakeTypeOfPatrimonyHistoricDAO_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuizDAO_9 extends _i1.SmartFake implements _i10.QuizDAO {
  _FakeQuizDAO_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVisitorDAO_10 extends _i1.SmartFake implements _i11.VisitorDAO {
  _FakeVisitorDAO_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVisitationStageDAO_11 extends _i1.SmartFake
    implements _i12.VisitationStageDAO {
  _FakeVisitationStageDAO_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotablePersonDAO_12 extends _i1.SmartFake
    implements _i13.NotablePersonDAO {
  _FakeNotablePersonDAO_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActingDAO_13 extends _i1.SmartFake implements _i14.ActingDAO {
  _FakeActingDAO_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVisitationElementDAO_14 extends _i1.SmartFake
    implements _i15.VisitationElementDAO {
  _FakeVisitationElementDAO_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTypeOfSimplePatrimonyDAO_15 extends _i1.SmartFake
    implements _i16.TypeOfSimplePatrimonyDAO {
  _FakeTypeOfSimplePatrimonyDAO_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatrimonyNewsMedia_16 extends _i1.SmartFake
    implements _i17.PatrimonyNewsMedia {
  _FakePatrimonyNewsMedia_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseSessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseSessionManager extends _i1.Mock
    implements _i2.DatabaseSessionManager {
  MockDatabaseSessionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isOpened => (super.noSuchMethod(
        Invocation.getter(#isOpened),
        returnValue: false,
      ) as bool);

  @override
  bool get isOnTransaction => (super.noSuchMethod(
        Invocation.getter(#isOnTransaction),
        returnValue: false,
      ) as bool);

  @override
  _i18.Future<bool> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i18.Future<dynamic>.value(),
      ) as _i18.Future<dynamic>);

  @override
  _i18.Future<Object> execute(
    String? sql, [
    List<dynamic>? values,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            values,
          ],
        ),
        returnValue: _i18.Future<Object>.value(_FakeObject_0(
          this,
          Invocation.method(
            #execute,
            [
              sql,
              values,
            ],
          ),
        )),
      ) as _i18.Future<Object>);

  @override
  _i18.Future<Iterable<dynamic>?> executeQuery(
    String? sql, [
    List<Object>? values,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeQuery,
          [
            sql,
            values,
          ],
        ),
        returnValue: _i18.Future<Iterable<dynamic>?>.value(),
      ) as _i18.Future<Iterable<dynamic>?>);

  @override
  _i18.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<dynamic> rollback() => (super.noSuchMethod(
        Invocation.method(
          #rollback,
          [],
        ),
        returnValue: _i18.Future<dynamic>.value(),
      ) as _i18.Future<dynamic>);

  @override
  String getType() => (super.noSuchMethod(
        Invocation.method(
          #getType,
          [],
        ),
        returnValue: _i19.dummyValue<String>(
          this,
          Invocation.method(
            #getType,
            [],
          ),
        ),
      ) as String);

  @override
  _i18.Future<dynamic> startTransaction() => (super.noSuchMethod(
        Invocation.method(
          #startTransaction,
          [],
        ),
        returnValue: _i18.Future<dynamic>.value(),
      ) as _i18.Future<dynamic>);

  @override
  _i2.DatabaseSessionManager clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeDatabaseSessionManager_1(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i2.DatabaseSessionManager);
}

/// A class which mocks [DAOFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDAOFactory extends _i1.Mock implements _i20.DAOFactory {
  MockDAOFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TypeOfPatrimonyDAO createTypeOfPatrimonyDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTypeOfPatrimonyDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeTypeOfPatrimonyDAO_2(
          this,
          Invocation.method(
            #createTypeOfPatrimonyDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i3.TypeOfPatrimonyDAO);

  @override
  _i4.PatrimonyDAO createPatrimonyDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPatrimonyDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakePatrimonyDAO_3(
          this,
          Invocation.method(
            #createPatrimonyDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i4.PatrimonyDAO);

  @override
  _i5.TypeOfActingDAO createTypeOfActingDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTypeOfActingDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeTypeOfActingDAO_4(
          this,
          Invocation.method(
            #createTypeOfActingDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i5.TypeOfActingDAO);

  @override
  _i6.TypeOfMediaDAO createTypeOfMediaDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTypeOfMediaDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeTypeOfMediaDAO_5(
          this,
          Invocation.method(
            #createTypeOfMediaDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i6.TypeOfMediaDAO);

  @override
  _i7.TypeOfEventDAO createTypeOfEventDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTypeOfEventDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeTypeOfEventDAO_6(
          this,
          Invocation.method(
            #createTypeOfEventDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i7.TypeOfEventDAO);

  @override
  _i8.PatrimonyNewsMediaDAO createPatrimonyNewsMediaDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPatrimonyNewsMediaDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakePatrimonyNewsMediaDAO_7(
          this,
          Invocation.method(
            #createPatrimonyNewsMediaDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i8.PatrimonyNewsMediaDAO);

  @override
  _i9.TypeOfPatrimonyHistoricDAO createTypeOfPatrimonyHistoricDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTypeOfPatrimonyHistoricDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeTypeOfPatrimonyHistoricDAO_8(
          this,
          Invocation.method(
            #createTypeOfPatrimonyHistoricDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i9.TypeOfPatrimonyHistoricDAO);

  @override
  _i10.QuizDAO createQuizDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createQuizDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeQuizDAO_9(
          this,
          Invocation.method(
            #createQuizDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i10.QuizDAO);

  @override
  _i11.VisitorDAO createVisitorDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createVisitorDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeVisitorDAO_10(
          this,
          Invocation.method(
            #createVisitorDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i11.VisitorDAO);

  @override
  _i12.VisitationStageDAO createVisitationStageDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createVisitationStageDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeVisitationStageDAO_11(
          this,
          Invocation.method(
            #createVisitationStageDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i12.VisitationStageDAO);

  @override
  _i13.NotablePersonDAO createNotablePersonDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotablePersonDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeNotablePersonDAO_12(
          this,
          Invocation.method(
            #createNotablePersonDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i13.NotablePersonDAO);

  @override
  _i14.ActingDAO createActingDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createActingDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeActingDAO_13(
          this,
          Invocation.method(
            #createActingDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i14.ActingDAO);

  @override
  _i15.VisitationElementDAO createVisitationElementDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createVisitationElementDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeVisitationElementDAO_14(
          this,
          Invocation.method(
            #createVisitationElementDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i15.VisitationElementDAO);

  @override
  _i16.TypeOfSimplePatrimonyDAO createTypeOfSimplePatrimonyDAO(
          _i2.DatabaseSessionManager? databaseSessionManager) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTypeOfSimplePatrimonyDAO,
          [databaseSessionManager],
        ),
        returnValue: _FakeTypeOfSimplePatrimonyDAO_15(
          this,
          Invocation.method(
            #createTypeOfSimplePatrimonyDAO,
            [databaseSessionManager],
          ),
        ),
      ) as _i16.TypeOfSimplePatrimonyDAO);
}

/// A class which mocks [TypeOfEventDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypeOfEventDAO extends _i1.Mock implements _i7.TypeOfEventDAO {
  MockTypeOfEventDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [VisitorDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitorDAO extends _i1.Mock implements _i11.VisitorDAO {
  MockVisitorDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i21.Visitor?> findByPersonId(int? personId) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByPersonId,
          [personId],
        ),
        returnValue: _i18.Future<_i21.Visitor?>.value(),
      ) as _i18.Future<_i21.Visitor?>);

  @override
  _i18.Future<List<dynamic>> findAllByAddress(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByAddress,
          [address],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<List<dynamic>> findAllByNumber(int? number) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByNumber,
          [number],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<List<dynamic>> findAllByComplemento(String? complemento) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByComplemento,
          [complemento],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<List<dynamic>> findAllByDistrict(String? district) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByDistrict,
          [district],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<List<dynamic>> findAllByCity(String? city) => (super.noSuchMethod(
        Invocation.method(
          #findAllByCity,
          [city],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<List<dynamic>> findAllByState(String? state) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByState,
          [state],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<List<dynamic>> findAllByPostalCode(String? postalCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByPostalCode,
          [postalCode],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<List<dynamic>> findAllByPhone(String? phone) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAllByPhone,
          [phone],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<_i21.Visitor?> findByEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #findByEmail,
          [email],
        ),
        returnValue: _i18.Future<_i21.Visitor?>.value(),
      ) as _i18.Future<_i21.Visitor?>);

  @override
  _i18.Future<_i21.Visitor?> findByMemoryId(int? memoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByMemoryId,
          [memoryId],
        ),
        returnValue: _i18.Future<_i21.Visitor?>.value(),
      ) as _i18.Future<_i21.Visitor?>);

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [NotablePersonDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotablePersonDAO extends _i1.Mock implements _i13.NotablePersonDAO {
  MockNotablePersonDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i22.NotablePerson?> findByPatrimonyPersonId(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByPatrimonyPersonId,
          [id],
        ),
        returnValue: _i18.Future<_i22.NotablePerson?>.value(),
      ) as _i18.Future<_i22.NotablePerson?>);

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [VisitationStageDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitationStageDAO extends _i1.Mock
    implements _i12.VisitationStageDAO {
  MockVisitationStageDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i23.VisitationStage?> findByid(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findByid,
          [id],
        ),
        returnValue: _i18.Future<_i23.VisitationStage?>.value(),
      ) as _i18.Future<_i23.VisitationStage?>);

  @override
  _i18.Future<List<dynamic>> findAllByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #findAllByName,
          [name],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<_i23.VisitationStage?> findByVisitationItineraryId(
          int? visitationItineraryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByVisitationItineraryId,
          [visitationItineraryId],
        ),
        returnValue: _i18.Future<_i23.VisitationStage?>.value(),
      ) as _i18.Future<_i23.VisitationStage?>);

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [QuizDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizDAO extends _i1.Mock implements _i10.QuizDAO {
  MockQuizDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic findByDescription(String? description) =>
      super.noSuchMethod(Invocation.method(
        #findByDescription,
        [description],
      ));

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [PatrimonyNewsMediaDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatrimonyNewsMediaDAO extends _i1.Mock
    implements _i8.PatrimonyNewsMediaDAO {
  MockPatrimonyNewsMediaDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i17.PatrimonyNewsMedia> findByDescription(String? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByDescription,
          [description],
        ),
        returnValue: _i18.Future<_i17.PatrimonyNewsMedia>.value(
            _FakePatrimonyNewsMedia_16(
          this,
          Invocation.method(
            #findByDescription,
            [description],
          ),
        )),
      ) as _i18.Future<_i17.PatrimonyNewsMedia>);

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [TypeOfPatrimonyHistoricDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypeOfPatrimonyHistoricDAO extends _i1.Mock
    implements _i9.TypeOfPatrimonyHistoricDAO {
  MockTypeOfPatrimonyHistoricDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic findByDescription(String? description) =>
      super.noSuchMethod(Invocation.method(
        #findByDescription,
        [description],
      ));

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [ActingDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockActingDAO extends _i1.Mock implements _i14.ActingDAO {
  MockActingDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i14.ActingDAO> findByDescription(String? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByDescription,
          [description],
        ),
        returnValue: _i18.Future<_i14.ActingDAO>.value(_FakeActingDAO_13(
          this,
          Invocation.method(
            #findByDescription,
            [description],
          ),
        )),
      ) as _i18.Future<_i14.ActingDAO>);

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [TypeOfSimplePatrimonyDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypeOfSimplePatrimonyDAO extends _i1.Mock
    implements _i16.TypeOfSimplePatrimonyDAO {
  MockTypeOfSimplePatrimonyDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i16.TypeOfSimplePatrimonyDAO> findByDescription(
          String? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByDescription,
          [description],
        ),
        returnValue: _i18.Future<_i16.TypeOfSimplePatrimonyDAO>.value(
            _FakeTypeOfSimplePatrimonyDAO_15(
          this,
          Invocation.method(
            #findByDescription,
            [description],
          ),
        )),
      ) as _i18.Future<_i16.TypeOfSimplePatrimonyDAO>);

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}

/// A class which mocks [VisitationElementDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitationElementDAO extends _i1.Mock
    implements _i15.VisitationElementDAO {
  MockVisitationElementDAO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<_i15.VisitationElementDAO> findByDescription(
          String? description) =>
      (super.noSuchMethod(
        Invocation.method(
          #findByDescription,
          [description],
        ),
        returnValue: _i18.Future<_i15.VisitationElementDAO>.value(
            _FakeVisitationElementDAO_14(
          this,
          Invocation.method(
            #findByDescription,
            [description],
          ),
        )),
      ) as _i18.Future<_i15.VisitationElementDAO>);

  @override
  _i18.Future<bool> insert(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> update(Object? dto) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [dto],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<bool> delete(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);

  @override
  _i18.Future<Object?> findById(Object? id) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [id],
        ),
        returnValue: _i18.Future<Object?>.value(),
      ) as _i18.Future<Object?>);

  @override
  _i18.Future<List<dynamic>> findAll([
    int? limit,
    int? offset,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [
            limit,
            offset,
          ],
        ),
        returnValue: _i18.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i18.Future<List<dynamic>>);

  @override
  _i18.Future<int> count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _i18.Future<int>.value(0),
      ) as _i18.Future<int>);
}
